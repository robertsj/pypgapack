# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pypgapack', [dirname(__file__)])
        except ImportError:
            import _pypgapack
            return _pypgapack
        if fp is not None:
            try:
                _mod = imp.load_module('_pypgapack', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pypgapack = swig_import_helper()
    del swig_import_helper
else:
    import _pypgapack
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class PGA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PGA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PGA, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pypgapack.new_PGA(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pypgapack.delete_PGA
    __del__ = lambda self : None;
    def SetUp(self): return _pypgapack.PGA_SetUp(self)
    def Destroy(self): return _pypgapack.PGA_Destroy(self)
    DATATYPE_BINARY = _pypgapack.PGA_DATATYPE_BINARY
    DATATYPE_INTEGER = _pypgapack.PGA_DATATYPE_INTEGER
    DATATYPE_REAL = _pypgapack.PGA_DATATYPE_REAL
    DATATYPE_CHARACTER = _pypgapack.PGA_DATATYPE_CHARACTER
    DATATYPE_USER = _pypgapack.PGA_DATATYPE_USER
    MAXIMIZE = _pypgapack.PGA_MAXIMIZE
    MINIMIZE = _pypgapack.PGA_MINIMIZE
    STOP_MAXITER = _pypgapack.PGA_STOP_MAXITER
    STOP_NOCHANGE = _pypgapack.PGA_STOP_NOCHANGE
    TOP_TOOSIMILAR = _pypgapack.PGA_TOP_TOOSIMILAR
    CROSSOVER_ONEPT = _pypgapack.PGA_CROSSOVER_ONEPT
    CROSSOVER_TWOPT = _pypgapack.PGA_CROSSOVER_TWOPT
    CROSSOVER_UNIFORM = _pypgapack.PGA_CROSSOVER_UNIFORM
    SELECT_PROPORTIONAL = _pypgapack.PGA_SELECT_PROPORTIONAL
    SELECT_SUS = _pypgapack.PGA_SELECT_SUS
    SELECT_TOURNAMENT = _pypgapack.PGA_SELECT_TOURNAMENT
    SELECT_PTOURNAMENT = _pypgapack.PGA_SELECT_PTOURNAMENT
    FITNESS_RAW = _pypgapack.PGA_FITNESS_RAW
    FITNESS_NORMAL = _pypgapack.PGA_FITNESS_NORMAL
    FITNESS_RANKING = _pypgapack.PGA_FITNESS_RANKING
    MUTATION_CONSTANT = _pypgapack.PGA_MUTATION_CONSTANT
    MUTATION_RANGE = _pypgapack.PGA_MUTATION_RANGE
    MUTATION_UNIFORM = _pypgapack.PGA_MUTATION_UNIFORM
    MUTATION_GAUSSIAN = _pypgapack.PGA_MUTATION_GAUSSIAN
    MUTATION_PERMUTE = _pypgapack.PGA_MUTATION_PERMUTE
    POPREPL_BEST = _pypgapack.PGA_POPREPL_BEST
    POPREPL_RANDOM_NOREP = _pypgapack.PGA_POPREPL_RANDOM_NOREP
    POPREPL_RANDOM_REP = _pypgapack.PGA_POPREPL_RANDOM_REP
    USERFUNCTION_INITSTRING = _pypgapack.PGA_USERFUNCTION_INITSTRING
    USERFUNCTION_CROSSOVER = _pypgapack.PGA_USERFUNCTION_CROSSOVER
    USERFUNCTION_MUTATION = _pypgapack.PGA_USERFUNCTION_MUTATION
    USERFUNCTION_ENDOFGEN = _pypgapack.PGA_USERFUNCTION_ENDOFGEN
    OLDPOP = _pypgapack.PGA_OLDPOP
    NEWPOP = _pypgapack.PGA_NEWPOP
    FALSE = _pypgapack.PGA_FALSE
    TRUE = _pypgapack.PGA_TRUE
    def SetBinaryAllele(self, *args): return _pypgapack.PGA_SetBinaryAllele(self, *args)
    def GetBinaryAllele(self, *args): return _pypgapack.PGA_GetBinaryAllele(self, *args)
    def SetBinaryInitProb(self, *args): return _pypgapack.PGA_SetBinaryInitProb(self, *args)
    def GetBinaryInitProb(self): return _pypgapack.PGA_GetBinaryInitProb(self)
    def BinaryCreateString(self, *args): return _pypgapack.PGA_BinaryCreateString(self, *args)
    def BinaryMutation(self, *args): return _pypgapack.PGA_BinaryMutation(self, *args)
    def BinaryOneptCrossover(self, *args): return _pypgapack.PGA_BinaryOneptCrossover(self, *args)
    def BinaryTwoptCrossover(self, *args): return _pypgapack.PGA_BinaryTwoptCrossover(self, *args)
    def BinaryUniformCrossover(self, *args): return _pypgapack.PGA_BinaryUniformCrossover(self, *args)
    def BinaryPrintString(self, *args): return _pypgapack.PGA_BinaryPrintString(self, *args)
    def BinaryCopyString(self, *args): return _pypgapack.PGA_BinaryCopyString(self, *args)
    def BinaryDuplicate(self, *args): return _pypgapack.PGA_BinaryDuplicate(self, *args)
    def BinaryInitString(self, *args): return _pypgapack.PGA_BinaryInitString(self, *args)
    def BinaryBuildDatatype(self, *args): return _pypgapack.PGA_BinaryBuildDatatype(self, *args)
    def BinaryHammingDistance(self, *args): return _pypgapack.PGA_BinaryHammingDistance(self, *args)
    def BinaryPrint(self, *args): return _pypgapack.PGA_BinaryPrint(self, *args)
    def SetCharacterAllele(self, *args): return _pypgapack.PGA_SetCharacterAllele(self, *args)
    def GetCharacterAllele(self, *args): return _pypgapack.PGA_GetCharacterAllele(self, *args)
    def SetCharacterInitType(self, *args): return _pypgapack.PGA_SetCharacterInitType(self, *args)
    def CharacterCreateString(self, *args): return _pypgapack.PGA_CharacterCreateString(self, *args)
    def CharacterMutation(self, *args): return _pypgapack.PGA_CharacterMutation(self, *args)
    def CharacterOneptCrossover(self, *args): return _pypgapack.PGA_CharacterOneptCrossover(self, *args)
    def CharacterTwoptCrossover(self, *args): return _pypgapack.PGA_CharacterTwoptCrossover(self, *args)
    def CharacterUniformCrossover(self, *args): return _pypgapack.PGA_CharacterUniformCrossover(self, *args)
    def CharacterPrintString(self, *args): return _pypgapack.PGA_CharacterPrintString(self, *args)
    def CharacterCopyString(self, *args): return _pypgapack.PGA_CharacterCopyString(self, *args)
    def CharacterDuplicate(self, *args): return _pypgapack.PGA_CharacterDuplicate(self, *args)
    def CharacterInitString(self, *args): return _pypgapack.PGA_CharacterInitString(self, *args)
    def CharacterBuildDatatype(self, *args): return _pypgapack.PGA_CharacterBuildDatatype(self, *args)
    def SetRandomInitFlag(self, *args): return _pypgapack.PGA_SetRandomInitFlag(self, *args)
    def GetRandomInitFlag(self): return _pypgapack.PGA_GetRandomInitFlag(self)
    def CreatePop(self, *args): return _pypgapack.PGA_CreatePop(self, *args)
    def CreateIndividual(self, *args): return _pypgapack.PGA_CreateIndividual(self, *args)
    def Crossover(self, *args): return _pypgapack.PGA_Crossover(self, *args)
    def GetCrossoverType(self): return _pypgapack.PGA_GetCrossoverType(self)
    def GetCrossoverProb(self): return _pypgapack.PGA_GetCrossoverProb(self)
    def GetUniformCrossoverProb(self): return _pypgapack.PGA_GetUniformCrossoverProb(self)
    def SetCrossoverType(self, *args): return _pypgapack.PGA_SetCrossoverType(self, *args)
    def SetCrossoverProb(self, *args): return _pypgapack.PGA_SetCrossoverProb(self, *args)
    def SetUniformCrossoverProb(self, *args): return _pypgapack.PGA_SetUniformCrossoverProb(self, *args)
    def Duplicate(self, *args): return _pypgapack.PGA_Duplicate(self, *args)
    def Change(self, *args): return _pypgapack.PGA_Change(self, *args)
    def SetNoDuplicatesFlag(self, *args): return _pypgapack.PGA_SetNoDuplicatesFlag(self, *args)
    def GetNoDuplicatesFlag(self): return _pypgapack.PGA_GetNoDuplicatesFlag(self)
    def SetEvaluation(self, *args): return _pypgapack.PGA_SetEvaluation(self, *args)
    def GetEvaluation(self, *args): return _pypgapack.PGA_GetEvaluation(self, *args)
    def SetEvaluationUpToDateFlag(self, *args): return _pypgapack.PGA_SetEvaluationUpToDateFlag(self, *args)
    def GetEvaluationUpToDateFlag(self, *args): return _pypgapack.PGA_GetEvaluationUpToDateFlag(self, *args)
    def GetRealFromBinary(self, *args): return _pypgapack.PGA_GetRealFromBinary(self, *args)
    def GetRealFromGrayCode(self, *args): return _pypgapack.PGA_GetRealFromGrayCode(self, *args)
    def EncodeRealAsBinary(self, *args): return _pypgapack.PGA_EncodeRealAsBinary(self, *args)
    def EncodeRealAsGrayCode(self, *args): return _pypgapack.PGA_EncodeRealAsGrayCode(self, *args)
    def GetIntegerFromBinary(self, *args): return _pypgapack.PGA_GetIntegerFromBinary(self, *args)
    def GetIntegerFromGrayCode(self, *args): return _pypgapack.PGA_GetIntegerFromGrayCode(self, *args)
    def EncodeIntegerAsBinary(self, *args): return _pypgapack.PGA_EncodeIntegerAsBinary(self, *args)
    def EncodeIntegerAsGrayCode(self, *args): return _pypgapack.PGA_EncodeIntegerAsGrayCode(self, *args)
    def MapIntegerToReal(self, *args): return _pypgapack.PGA_MapIntegerToReal(self, *args)
    def MapRealToInteger(self, *args): return _pypgapack.PGA_MapRealToInteger(self, *args)
    def Fitness(self, *args): return _pypgapack.PGA_Fitness(self, *args)
    def Rank(self, *args): return _pypgapack.PGA_Rank(self, *args)
    def GetFitness(self, *args): return _pypgapack.PGA_GetFitness(self, *args)
    def GetFitnessType(self): return _pypgapack.PGA_GetFitnessType(self)
    def GetFitnessMinType(self): return _pypgapack.PGA_GetFitnessMinType(self)
    def GetMaxFitnessRank(self): return _pypgapack.PGA_GetMaxFitnessRank(self)
    def SetFitnessType(self, *args): return _pypgapack.PGA_SetFitnessType(self, *args)
    def SetFitnessMinType(self, *args): return _pypgapack.PGA_SetFitnessMinType(self, *args)
    def SetMaxFitnessRank(self, *args): return _pypgapack.PGA_SetMaxFitnessRank(self, *args)
    def FitnessLinearNormal(self, *args): return _pypgapack.PGA_FitnessLinearNormal(self, *args)
    def FitnessLinearRank(self, *args): return _pypgapack.PGA_FitnessLinearRank(self, *args)
    def FitnessMinReciprocal(self, *args): return _pypgapack.PGA_FitnessMinReciprocal(self, *args)
    def FitnessMinCmax(self, *args): return _pypgapack.PGA_FitnessMinCmax(self, *args)
    def SetFitnessCmaxValue(self, *args): return _pypgapack.PGA_SetFitnessCmaxValue(self, *args)
    def GetFitnessCmaxValue(self): return _pypgapack.PGA_GetFitnessCmaxValue(self)
    def HammingDistance(self, *args): return _pypgapack.PGA_HammingDistance(self, *args)
    def DblHeapSort(self, *args): return _pypgapack.PGA_DblHeapSort(self, *args)
    def IntHeapSort(self, *args): return _pypgapack.PGA_IntHeapSort(self, *args)
    def SetIntegerAllele(self, *args): return _pypgapack.PGA_SetIntegerAllele(self, *args)
    def GetIntegerAllele(self, *args): return _pypgapack.PGA_GetIntegerAllele(self, *args)
    def SetIntegerInitPermute(self, *args): return _pypgapack.PGA_SetIntegerInitPermute(self, *args)
    def GetIntegerInitType(self): return _pypgapack.PGA_GetIntegerInitType(self)
    def GetMinIntegerInitValue(self, *args): return _pypgapack.PGA_GetMinIntegerInitValue(self, *args)
    def GetMaxIntegerInitValue(self, *args): return _pypgapack.PGA_GetMaxIntegerInitValue(self, *args)
    def IntegerCreateString(self, *args): return _pypgapack.PGA_IntegerCreateString(self, *args)
    def IntegerMutation(self, *args): return _pypgapack.PGA_IntegerMutation(self, *args)
    def IntegerOneptCrossover(self, *args): return _pypgapack.PGA_IntegerOneptCrossover(self, *args)
    def IntegerTwoptCrossover(self, *args): return _pypgapack.PGA_IntegerTwoptCrossover(self, *args)
    def IntegerUniformCrossover(self, *args): return _pypgapack.PGA_IntegerUniformCrossover(self, *args)
    def IntegerPrintString(self, *args): return _pypgapack.PGA_IntegerPrintString(self, *args)
    def IntegerCopyString(self, *args): return _pypgapack.PGA_IntegerCopyString(self, *args)
    def IntegerDuplicate(self, *args): return _pypgapack.PGA_IntegerDuplicate(self, *args)
    def IntegerInitString(self, *args): return _pypgapack.PGA_IntegerInitString(self, *args)
    def IntegerBuildDatatype(self, *args): return _pypgapack.PGA_IntegerBuildDatatype(self, *args)
    def Mutate(self, *args): return _pypgapack.PGA_Mutate(self, *args)
    def SetMutationType(self, *args): return _pypgapack.PGA_SetMutationType(self, *args)
    def GetMutationType(self): return _pypgapack.PGA_GetMutationType(self)
    def SetMutationRealValue(self, *args): return _pypgapack.PGA_SetMutationRealValue(self, *args)
    def GetMutationRealValue(self): return _pypgapack.PGA_GetMutationRealValue(self)
    def SetMutationIntegerValue(self, *args): return _pypgapack.PGA_SetMutationIntegerValue(self, *args)
    def GetMutationIntegerValue(self): return _pypgapack.PGA_GetMutationIntegerValue(self)
    def SetMutationBoundedFlag(self, *args): return _pypgapack.PGA_SetMutationBoundedFlag(self, *args)
    def GetMutationBoundedFlag(self): return _pypgapack.PGA_GetMutationBoundedFlag(self)
    def SetMutationProb(self, *args): return _pypgapack.PGA_SetMutationProb(self, *args)
    def GetMutationProb(self): return _pypgapack.PGA_GetMutationProb(self)
    def RunMutationAndCrossover(self, *args): return _pypgapack.PGA_RunMutationAndCrossover(self, *args)
    def RunMutationOrCrossover(self, *args): return _pypgapack.PGA_RunMutationOrCrossover(self, *args)
    def UpdateGeneration(self, *args): return _pypgapack.PGA_UpdateGeneration(self, *args)
    def GetDataType(self): return _pypgapack.PGA_GetDataType(self)
    def GetOptDirFlag(self): return _pypgapack.PGA_GetOptDirFlag(self)
    def GetStringLength(self): return _pypgapack.PGA_GetStringLength(self)
    def GetVariableStringLength(self, *args): return _pypgapack.PGA_GetVariableStringLength(self, *args)
    def GetGAIterValue(self): return _pypgapack.PGA_GetGAIterValue(self)
    def SetMutationOrCrossoverFlag(self, *args): return _pypgapack.PGA_SetMutationOrCrossoverFlag(self, *args)
    def SetMutationAndCrossoverFlag(self, *args): return _pypgapack.PGA_SetMutationAndCrossoverFlag(self, *args)
    def GetMutationOrCrossoverFlag(self): return _pypgapack.PGA_GetMutationOrCrossoverFlag(self)
    def GetMutationAndCrossoverFlag(self): return _pypgapack.PGA_GetMutationAndCrossoverFlag(self)
    def SortPop(self, *args): return _pypgapack.PGA_SortPop(self, *args)
    def GetPopSize(self): return _pypgapack.PGA_GetPopSize(self)
    def GetNumReplaceValue(self): return _pypgapack.PGA_GetNumReplaceValue(self)
    def GetPopReplaceType(self): return _pypgapack.PGA_GetPopReplaceType(self)
    def GetSortedPopIndex(self, *args): return _pypgapack.PGA_GetSortedPopIndex(self, *args)
    def SetPopSize(self, *args): return _pypgapack.PGA_SetPopSize(self, *args)
    def SetNumReplaceValue(self, *args): return _pypgapack.PGA_SetNumReplaceValue(self, *args)
    def SetPopReplaceType(self, *args): return _pypgapack.PGA_SetPopReplaceType(self, *args)
    def RandomFlip(self, *args): return _pypgapack.PGA_RandomFlip(self, *args)
    def RandomInterval(self, *args): return _pypgapack.PGA_RandomInterval(self, *args)
    def Random01(self, *args): return _pypgapack.PGA_Random01(self, *args)
    def RandomUniform(self, *args): return _pypgapack.PGA_RandomUniform(self, *args)
    def RandomGaussian(self, *args): return _pypgapack.PGA_RandomGaussian(self, *args)
    def GetRandomSeed(self): return _pypgapack.PGA_GetRandomSeed(self)
    def SetRandomSeed(self, *args): return _pypgapack.PGA_SetRandomSeed(self, *args)
    def SetRealAllele(self, *args): return _pypgapack.PGA_SetRealAllele(self, *args)
    def GetRealAllele(self, *args): return _pypgapack.PGA_GetRealAllele(self, *args)
    def SetRealInitPercent(self, *args): return _pypgapack.PGA_SetRealInitPercent(self, *args)
    def GetMinRealInitValue(self, *args): return _pypgapack.PGA_GetMinRealInitValue(self, *args)
    def GetMaxRealInitValue(self, *args): return _pypgapack.PGA_GetMaxRealInitValue(self, *args)
    def GetRealInitType(self): return _pypgapack.PGA_GetRealInitType(self)
    def RealCreateString(self, *args): return _pypgapack.PGA_RealCreateString(self, *args)
    def RealMutation(self, *args): return _pypgapack.PGA_RealMutation(self, *args)
    def RealOneptCrossover(self, *args): return _pypgapack.PGA_RealOneptCrossover(self, *args)
    def RealTwoptCrossover(self, *args): return _pypgapack.PGA_RealTwoptCrossover(self, *args)
    def RealUniformCrossover(self, *args): return _pypgapack.PGA_RealUniformCrossover(self, *args)
    def RealPrintString(self, *args): return _pypgapack.PGA_RealPrintString(self, *args)
    def RealCopyString(self, *args): return _pypgapack.PGA_RealCopyString(self, *args)
    def RealDuplicate(self, *args): return _pypgapack.PGA_RealDuplicate(self, *args)
    def RealInitString(self, *args): return _pypgapack.PGA_RealInitString(self, *args)
    def RealBuildDatatype(self, *args): return _pypgapack.PGA_RealBuildDatatype(self, *args)
    def PrintReport(self, *args): return _pypgapack.PGA_PrintReport(self, *args)
    def SetPrintOptions(self, *args): return _pypgapack.PGA_SetPrintOptions(self, *args)
    def SetPrintFrequencyValue(self, *args): return _pypgapack.PGA_SetPrintFrequencyValue(self, *args)
    def GetPrintFrequencyValue(self): return _pypgapack.PGA_GetPrintFrequencyValue(self)
    def PrintPopulation(self, *args): return _pypgapack.PGA_PrintPopulation(self, *args)
    def PrintIndividual(self, *args): return _pypgapack.PGA_PrintIndividual(self, *args)
    def PrintString(self, *args): return _pypgapack.PGA_PrintString(self, *args)
    def PrintContextVariable(self, *args): return _pypgapack.PGA_PrintContextVariable(self, *args)
    def Restart(self, *args): return _pypgapack.PGA_Restart(self, *args)
    def SetRestartFlag(self, *args): return _pypgapack.PGA_SetRestartFlag(self, *args)
    def GetRestartFlag(self): return _pypgapack.PGA_GetRestartFlag(self)
    def SetRestartFrequencyValue(self, *args): return _pypgapack.PGA_SetRestartFrequencyValue(self, *args)
    def GetRestartFrequencyValue(self): return _pypgapack.PGA_GetRestartFrequencyValue(self)
    def SetRestartAlleleChangeProb(self, *args): return _pypgapack.PGA_SetRestartAlleleChangeProb(self, *args)
    def GetRestartAlleleChangeProb(self): return _pypgapack.PGA_GetRestartAlleleChangeProb(self)
    def Select(self, *args): return _pypgapack.PGA_Select(self, *args)
    def SelectNextIndex(self): return _pypgapack.PGA_SelectNextIndex(self)
    def SetSelectType(self, *args): return _pypgapack.PGA_SetSelectType(self, *args)
    def GetSelectType(self): return _pypgapack.PGA_GetSelectType(self)
    def SetPTournamentProb(self, *args): return _pypgapack.PGA_SetPTournamentProb(self, *args)
    def GetPTournamentProb(self): return _pypgapack.PGA_GetPTournamentProb(self)
    def SelectProportional(self, *args): return _pypgapack.PGA_SelectProportional(self, *args)
    def SelectSUS(self, *args): return _pypgapack.PGA_SelectSUS(self, *args)
    def SelectTournament(self, *args): return _pypgapack.PGA_SelectTournament(self, *args)
    def SelectPTournament(self, *args): return _pypgapack.PGA_SelectPTournament(self, *args)
    def Done(self, *args): return _pypgapack.PGA_Done(self, *args)
    def CheckStoppingConditions(self): return _pypgapack.PGA_CheckStoppingConditions(self)
    def SetStoppingRuleType(self, *args): return _pypgapack.PGA_SetStoppingRuleType(self, *args)
    def GetStoppingRuleType(self): return _pypgapack.PGA_GetStoppingRuleType(self)
    def SetMaxGAIterValue(self, *args): return _pypgapack.PGA_SetMaxGAIterValue(self, *args)
    def GetMaxGAIterValue(self): return _pypgapack.PGA_GetMaxGAIterValue(self)
    def SetMaxNoChangeValue(self, *args): return _pypgapack.PGA_SetMaxNoChangeValue(self, *args)
    def SetMaxSimilarityValue(self, *args): return _pypgapack.PGA_SetMaxSimilarityValue(self, *args)
    def Error(self, *args): return _pypgapack.PGA_Error(self, *args)
    def GetMaxMachineIntValue(self): return _pypgapack.PGA_GetMaxMachineIntValue(self)
    def GetMinMachineIntValue(self): return _pypgapack.PGA_GetMinMachineIntValue(self)
    def GetMaxMachineDoubleValue(self): return _pypgapack.PGA_GetMaxMachineDoubleValue(self)
    def GetMinMachineDoubleValue(self): return _pypgapack.PGA_GetMinMachineDoubleValue(self)
    def Usage(self): return _pypgapack.PGA_Usage(self)
    def PrintVersionNumber(self): return _pypgapack.PGA_PrintVersionNumber(self)
    def SetUserFunction(self, *args): return _pypgapack.PGA_SetUserFunction(self, *args)
    def Mean(self, *args): return _pypgapack.PGA_Mean(self, *args)
    def Stddev(self, *args): return _pypgapack.PGA_Stddev(self, *args)
    def Round(self, *args): return _pypgapack.PGA_Round(self, *args)
    def CopyIndividual(self, *args): return _pypgapack.PGA_CopyIndividual(self, *args)
    def CheckSum(self, *args): return _pypgapack.PGA_CheckSum(self, *args)
    def GetWorstIndex(self, *args): return _pypgapack.PGA_GetWorstIndex(self, *args)
    def GetBestIndex(self, *args): return _pypgapack.PGA_GetBestIndex(self, *args)
    def GetIndividual(self, *args): return _pypgapack.PGA_GetIndividual(self, *args)
    def UpdateAverage(self, *args): return _pypgapack.PGA_UpdateAverage(self, *args)
    def UpdateOnline(self, *args): return _pypgapack.PGA_UpdateOnline(self, *args)
    def UpdateOffline(self, *args): return _pypgapack.PGA_UpdateOffline(self, *args)
    def ComputeSimilarity(self, *args): return _pypgapack.PGA_ComputeSimilarity(self, *args)
    def GetContext(self): return _pypgapack.PGA_GetContext(self)
    def SetRealInitRange(self, *args): return _pypgapack.PGA_SetRealInitRange(self, *args)
    def SetIntegerInitRange(self, *args): return _pypgapack.PGA_SetIntegerInitRange(self, *args)
    def GetIntegerChromosome(self, *args): return _pypgapack.PGA_GetIntegerChromosome(self, *args)
    def GetRealChromosome(self, *args): return _pypgapack.PGA_GetRealChromosome(self, *args)
    def Run(self, *args): return _pypgapack.PGA_Run(self, *args)
    def Evaluate(self, *args): return _pypgapack.PGA_Evaluate(self, *args)
    def SetInitString(self, *args): return _pypgapack.PGA_SetInitString(self, *args)
    def SetCrossover(self, *args): return _pypgapack.PGA_SetCrossover(self, *args)
    def SetMutation(self, *args): return _pypgapack.PGA_SetMutation(self, *args)
    def SetEndOfGen(self, *args): return _pypgapack.PGA_SetEndOfGen(self, *args)
PGA_swigregister = _pypgapack.PGA_swigregister
PGA_swigregister(PGA)

# This file is compatible with both classic and new-style classes.


